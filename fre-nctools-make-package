#!/bin/bash
#
# ------------------------------------------------------------------------------
# FMS/FRE Project: Script to create the fre-nctools package
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2017
# Designed and written by Seth Underwood
#

# **********************************************************************
# Functions for use in script
# **********************************************************************

# Usage statement
#
# usage([<exit_value>])
usage () {
    echo "Usage: $( basename $0 ) [-v] [-P <prefix>] -s <site> <package_name>" 1>&2
    if [[ $1 -eq 0 ]]; then
        # If exiting with 0 status, print full help message.
	# Otherwise, only the first Usage line is printed.
	echo "       $( basename $0 ) -h" 1>&2   
        echo "" 1>&2
        echo "Options:" 1>&2
        echo "" 1>&2
        echo "     -h" 1>&2
        echo "          Print help message." 1>&2
        echo "" 1>&2
        echo "     -v" 1>&2
        echo "          Be verbose.  Can be repeated to increase the verbosity level." 1>&2
	echo "" 1>&2
        echo "     -s <site>" 1>&2
        echo "          Use <site> configuration in directory site-configs to build" 1>&2
	echo "          the package.  This option is required." 1>&2
        echo "" 1>&2
	echo "     -P <prefix>" 1>&2
	echo "          Set the install prefix." 1>&2
	echo "" 1>&2
	echo "     -n" 1>&2
	echo "          Prepare the build directory only, do not attempt to build." 1>&2
	echo "" 1>&2
	echo "     -d" 1>&2
	echo "          Build and install the documentation." 1>&2
	echo "" 1>&2
    fi
    exit $1
}


# **********************************************************************
# main script
# **********************************************************************

# Name of this script, and base directory where installed
scriptName=$( basename $0 )
scriptDir=$(dirname $(readlink -f "$0"))

# Default script configuration settings
package=fre-nctools
pkgName=''
verbose=0
site=''
prefix=''
doBuild='true'
doDocus='false'

# Parse the command line options
while getopts ":hvs:dnP:" opt; do
    case "$opt" in
	h)
	    usage 0
	    ;;
	v)
	    verbose=$[verbose+1]
	    ;;
	s)
	    site=${OPTARG}
	    ;;
	n)
	    doBuild='false'
	    ;;
	d)
	    doDocus='true'
	    ;;
	P)
	    prefix=${OPTARG}
	    ;;
	\?)
	    echo "${scriptName}: Unknown option: -${OPTARG}" 1>&2
	    usage 1
	    ;;
	:)
	    echo "${scriptName}: Missing option argument for -${OPTARG}" 1>&2
	    usage 1
	    ;;
    esac
done

shift $[OPTIND - 1]

pkgName=$1

if [ "X${pkgName}" == "X" ]; then
    # pkgName is not set.  Needs to be set on the command line
    echo "${scriptName}: Need to set the package name on the command line" 1>&2
    echo "" 2>&1
    usage 1
fi

if [ "X${site}" == "X" ]; then
    # site is not set.  Needs to be set on the command line
    echo "${scriptName}: Need to set the site name on the command line" 1>&2
    echo "" 2>&1
    usage 1
fi

# Check if the site is known.  This requires that:
#  1. The directory "site-configs/${site} exists
#  2. Two files exist in site-configs/${site}
#     i. env.shrc -- The environment settings
#     ii. build.mk -- Make macros needed for make
if [ ! -d "${scriptDir}/site-configs/${site}" ]; then
    echo "${scriptName}: Unknown site: ${site}.  Please refer to the installation instructions to create a site." 1>&2
    exit 1
fi
# Report if the site files exist
numMissing=0
if [ ! -e "${scriptDir}/site-configs/${site}/env.sh" ]; then
    echo "$scriptName: site file \"${scriptDir}/site-configs/${site}/env.sh\" is missing in the site configuration directory." 1>&2
    numMissing=$[numMissing + 1]
fi
if [ ! -e "${scriptDir}/site-configs/${site}/build.mk" ]; then
    echo "$scriptName: site file \"${scriptDir}/site-configs/${site}/build.mk\" is missing in the site configuration directory." 1>&2
    numMissing=$[numMissing + 1]
fi
if [[ $numMissing > 0 ]]; then
    # Exit b/c site files are missing.
    exit 1
fi

# Check the build directory.  By default, the build directory is the current pwd (if empty),
# If the current pwd is not empty, than the script will verify it can make a directory called
# 'build.${package}.${site}.${pkgName}.XXXXX' where 'XXXXX' are the mktemp template characters.
buildDir=''
if [[ $(ls -A $(pwd)) ]]; then
    # The directory is not empty, create a new directory
    #
    # Is the directory writable?
    if [ -w $(pwd) ]; then
	buildDir=$(pwd)/$(mktemp -d build.${package}.${site}.${pkgName}.XXXXX)
	if [[ $? -ne 0 ]]; then
	    echo "$scriptName: Unable to create build directory \"${buildDir}\"" 1>&2
	    exit 1
	fi
    else
	echo "$scriptName: Unable to create build directory in \"$(pwd)\".  Directory is not writable" 1>&2
	exit 1
    fi
else
    buildDir=$(pwd)
fi

# Last check that build directory is writable
if [ ! -w ${buildDir} ]; then
    echo "$scriptName: The build directory \"${buildDir}\" is not writable" 1>&2
    exit 1
fi

# Set the prefix, if not set
if [ "X${prefix}" == "X" ]; then
    prefix=${buildDir}
fi
# Append the pgkName to the prefix
prefix=${prefix}/${pkgName}

# If verbose, write out the configuration settings:
if [[ ${verbose} -ge 1 ]]; then
    echo "Building ${package} with the following settings:" 1>&2
    echo "Build site: ${site}" 1>&2
    echo "Build dir:  ${buildDir}" 1>&2
    echo "Install prefix: ${prefix}" 1>&2
fi
if [[ ${verbose} -ge 2 ]]; then
    echo "Using modules" 1>&2
    module list
fi
if [[ ${verbose} -ge 3 ]]; then
    echo "Full environment settings" 1>&2
    env 1>&2
    echo "Shell options set" 1>&2
    set 1>&2
fi

# Directories in the 'tools' directory that need to be compiled
toolsSRC="check_mask \
          fregrid \
          make_coupler_mosaic \
          make_hgrid \
          make_land_domain \
          make_regional_mosaic \
          make_quick_mosaic \
          make_solo_mosaic \
          make_topog \
          make_vgrid \
          mppncscatter \
          ncexists \
          remap_land \
          river_regrid \
          runoff_regrid \
          transfer_to_mosaic_grid"
# Directories in the 'postprocessing' directory that need to be compiled
postpSRC="combine_blobs \
          combine_restarts \
          iceberg_comb \
          land_utils \
          list_ncvars \
          mppnccombine \
          plevel \
          split_ncvars \
          timavg"

# Setup the build directory:
# Copy in the env and build.mk files:
cp ${scriptDir}/site-configs/${site}/env.sh ${buildDir}
cp ${scriptDir}/site-configs/${site}/build.mk ${buildDir}

ppBuildDir=${buildDir}/postprocessing
for dir in ${postpSRC}; do
    # Create the 'postprocessing' directory in the buildDir
    # This will contain the Makefile required for building the
    # tools in 'postprocessing'
    mkdir -p ${ppBuildDir}/${dir}

    # Bring in the Makefile
    cp ${scriptDir}/postprocessing/${dir}/Makefile ${ppBuildDir}/${dir}/Makefile
done

toolsBuildDir=${buildDir}/tools
for dir in ${toolsSRC}; do
    # Create the 'tools' directory in the buildDir
    # This will contain the Makefile required for building the
    # tools in 'tools'
    mkdir -p ${toolsBuildDir}/${dir}

    # Bring in the Makefile
    cp ${scriptDir}/tools/${dir}/Makefile ${toolsBuildDir}/${dir}/Makefile
done

# Get and prepare the master Makefile
cp ${scriptDir}/Makefile ${buildDir}
# Set the SRCDIR, PREFIX and SITE in the master Makefile
sed -i -e "/^SRCDIR *:\?=/c\SRCDIR := ${scriptDir}" ${buildDir}/Makefile
sed -i -e "/^PREFIX *:\?=/c\PREFIX := ${prefix}" ${buildDir}/Makefile
sed -i -e "/^SITE *:\?=/c\SITE := ${site}" ${buildDir}/Makefile

# Perform the build (unless option -n given)
if [ "${doBuild}" == "true" ]; then
    # Enter the build directory
    pushd ${buildDir}

    # Read in the environment configuration:
    . ./env.sh

    # Run make
    make
    if [[ $? -ne 0 ]]; then
	echo "${scriptName}: Error during build of ${package}.  What was completed is available in the build directory \"${buildDir}\"." 1>&2
	popd
	exit 1
    else
	# Install the package
	make install
	if [[ $? -ne 0 ]]; then
	    echo "${scriptName}: Error installing ${package} in ${prefix}.  What was completed is available in the build directory \"${buildDir}\"." 1>&2
	    popd
	    exit 1
	else
	    echo "Build and Install of ${package} complete, and available in ${prefix}."
	fi
    fi

    if [ "${doDocus}" == "true" ]; then
	# Create the documentation
	make docs
	if [[ $? -ne 0 ]]; then
	    echo "${scriptName}: Error creating ${package}'s documentation.  What was completed is available in build directory \"${buildDir}\"." 1>&2
	    popd
	    exit 1
        else
	    # Install the documentation
	    make install-docs
	    if [[ $? -ne 0 ]]; then
	        echo "${scriptName}: Error installing ${package}'s documentation.  What was completed is available in the build directory \"${buildDir}\"." 1>&2
	        popd
	        exit 1
	    else
	        echo "Build and Install of ${package}'s documentation is complete and available in ${prefix}."
	    fi
        fi
    fi

    # Return to previous directory
    popd
else
    echo "Build directory ready: ${buildDir}"
fi
